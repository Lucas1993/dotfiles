q
step
run
step
help
help all
q
y
info threads
quit
r
bt
where
b main
r
y
n
p a
n
p b
s
p i
p ip
p *ip
n
n
q
stop 8
r
b 8
r
y
print arr
q
y
b 8
r
print arr
print arr._M_impl
print arr._M_impl._M_start
print *(arr._M_impl._M_start)
print *(arr._M_impl._M_start)@2
print *(arr._M_impl._M_start)@3
quit
y
quit
r
p test
p test.y
print main
type test
ptype test
ptype main
quit
y
run
quit
y
quit
run
8
1000000
2
2
run
y
8
100000
run
y
8 100000
q
y
run
8 100000
q
y
run
where
q
y
run a.out
file a.out
q
run
where
break passagem_macros
run
y
n
s
run
n
s
f
run
n
print code
print code[0]
print code._M_start
print code._M_impl._M_start
print code._M_impl._M_start.linha
print code._M_impl._M_start.linha.linha
print code._M_impl._M_start.linha
print code._M_impl._M_start.linha.tokens
print code._M_impl._M_start.tokens
print code._M_impl._M_start.tokens._M_impl._M_start
print code._M_impl._M_start.tokens._M_impl._M_start.c_str
print code._M_impl._M_start.tokens._M_impl._M_start.c_str()
quit
y
n
break passagem_macros
run
n
print it
run
y
n
print it
print *it
print *it._M_impl
print *it.tokens._M_impl
print it->tokens._M_impl
print it->tokens._M_impl[0]
print it->tokens._M_impl->at(0)
q
y
break passagem_macros
y
run
q
break passagem_macros(std::vector<linha, std::allocator<linha> >) 
run
n
print it->tokens.size()
a = it+1
$a = it+1
print it
$3 = it+1
help
q
y
break passagem_macros(std::vector<linha, std::allocator<linha> >) 
run
n
print a
print code.size()
break main
run
y
n
print line
n
print linha_pronta
print linha_pronta.tokens
print linha_pronta.tokens._M_impl
print linha_pronta.tokens._M_impl._M_start
print linha_pronta.tokens._M_impl._M_start.0
print linha_pronta.tokens._M_impl._M_start[0x0]
print linha_pronta.tokens._M_impl._M_start.0x0
print linha_pronta.tokens._M_impl._M_start
print linha_pronta.tokens
print linha_pronta.tokens[0]
print linha_pronta.tokens
print code_vector
print code_vector[0]
print code_vector.at(0)
print code_vector
print *(code_vector._M_impl._M_start)
n
print line
n
print line
q
y
braek main
break main
run
n
next
print tokens
q
y
break main
run
n
print code_vector
n
q
break main
run
n
print buffer
print \r buffer
print r buffer
print code_vector
q
y
braek main
break main
run
b main
run
y
n
cout << t
std::cout << t
 << t
t
print t
print line
print linha_pronta
print linha_pronta
q
y
b main
run
n
print buffer
print line
n
print line
n
print line
n
print line
n
print code_vector
q
y
b main
r
n
until
n
untl 31
until 31
n
s
n
print code_vector
print code_str
n
print *(it._M_IMPL)
print it
n
info break
del 1
break 33
run
y
s
n
q
y
b passagem_macros
r
print code
n
s
n
print m_beg
print m_end
reverse-next
target record
target record-full
record stop
r
y
target record-full
n
s
n
print (*it).tokens
q
u
y
b passagem_macros
r
target record-full
n
s
n
print new_macro
reverse-next
print (*it).tokens
n
print (*it).tokens
y
n
r-n
reverse-n
reverse-next
a = std::find((*it).tokens.begin(), (*it).tokens.end(), "END")
$a = std::find((*it).tokens.begin(), (*it).tokens.end(), "END")
set $a = std::find((*it).tokens.begin(), (*it).tokens.end(), "END")
import algorithm
info sharedlibrary
q
y
b passagem_macros(std::vector<_linha, std::allocator<_linha> >) 
start
run
y
target record-full
n
s
n
print aux
n
rn
aux == true
print aux = true
print aux == true
print aux == (*it).tokens.end()
y
print (*it).tokens.end()
print (*it).tokens.start()
q
y
b passagem_macros(std::vector<_linha, std::allocator<_linha> >) 
run
n
s
n
until 41
print macro_body
n
q
y
break passagem_macros(std::vector<_linha, std::allocator<_linha> >&) 
run
n
print *it
print (*it).tokens
print (*it).tokens[0]
print (*it+1).tokens[0]
n
n
n
q
y
run
bt
q
y
break MacroTable::has(std::string) 
run
n
print name
info break
clear 1
break passagem_macros(std::vector<_linha, std::allocator<_linha> >&) 
run
y
n
print code
n
print code
n
print code
n
print code
s
q
y
b main
n
run
n
s
rn
f
finish
b MacroTable::has(std::string) 
r
n
continue
n
s
print name
n
up
print code
print (*it).tokens
print (*it).tokens[0]
print (*it)
type
whatis it
whatis code
whatis code[0]
whatis code.at(0)
print it
run
y
break passagem_macros(std::vector<_linha, std::allocator<_linha> >&) 
continue
n
print code
n
print it
n
print it
n
print it
n
print it
run
n
info break
clear 1
run
y
continue
print code
print \r code
print\r code
print \rcode
print /r code
q
y
break passagem_macros(std::vector<_linha, std::allocator<_linha> >&) 
run
n
print it
run
y
n
print ir
print it
n
s
print it
print code
n
print it
n
print it
until 41
print new_macro
n
print new_macro
print it
print it+1
n
print it
print it+1
n
print it
print code[4]
template class std::vector<Linha>
print code
print it
n
print it
print code
print it
*(code._M_start+1)
*(code._M_start+1)
code._M_start
print *(code._M_start+1)
print /r code
print *(code._M_impl._M_start+1)
print *(code._M_impl._M_start)
print *it
print it
print *(code._M_impl._M_start)
q
y
break passagem_macros(std::vector<_linha, std::allocator<_linha> >&) 
run
n
run
n
print it
n
print it
n
n
print it
n
print it
n
print code
print mnt
print mct
it = m_beg
set it = m_beg
print it
q
n
run
y
n
print it
print code
n
print it
it = m_beg
set it = m_beg
print it
n
s
q
y
b passagem_macros(std::vector<_linha, std::allocator<_linha> >&) 
r
n
print aux
n
print it
n
r
y
n
print it
n
s
n
print it
n
print name
n
s
print it
n
un 78
unt 78
q
y
b passagem_macros(std::vector<_linha, std::allocator<_linha> >&) 
r
n
s
n
print macro_body
n
print macro_result
r
y
target 
help target
target record-full
n
s
n
print it
n
print macro_it
print macros
rn
n
print macro_it
n
print macro_it
n
print macro_it.getLabeL()
print macro_it.getLabe()
print macro_it.getLabel()
print (*macro_it).getLabel()
y
print macro_name
q
y
b passagem_macros(std::vector<_linha, std::allocator<_linha> >&) 
r
n
code[0]
print code[0]
q
y
b passagem_macros(std::vector<_linha, std::allocator<_linha> >&) 
r
n
s
n
r
y
target record-full
n
s
n
s
q
y
b passagem_macros(std::vector<_linha, std::allocator<_linha> >&) 
r
n
r
y
target record-full
n
s
n
q
y
b passagem_macros(std::vector<_linha, std::allocator<_linha> >&) 
r
n
s
n
s
n
q
y
b passagem_macros(std::vector<_linha, std::allocator<_linha> >&) 
r
n
s
n
p erros_list
up
n
n
p erros_list
n
continue
q
b passagem_macros(std::vector<_linha, std::allocator<_linha> >&) 
r
q
y
b PARSER::run_macros(std::vector<_linha, std::allocator<_linha> >) 
r teste -m
q
y
b PARSER::passagem_macros(std::vector<_linha, std::allocator<_linha> >) 
run teste -m
n
s
fi
fini
s
n
print it
print code.end()
print code
n
print it
return
n
n
finis
print m_end
n
print m_end
print code.end()
n
q
y
b PARSER::passagem_macros(std::vector<_linha, std::allocator<_linha> >) 
r teste -m
n
s
finis
s
n
print error
print code
let $a = [1,2,3]
set $a = [1,2,3]
q
y
b PARSER::passagem_macros(std::vector<_linha, std::allocator<_linha> >) 
r
r teste -m
y
n
s
finis
s
n
until 52
n
print new_macro
n
print it
n
print i_end
n
r teste -m
target record-full
n
s
finis
n
rn
s
finis
s
n
until 52
n
print it
n
print code.begin()
y
print (code.begin() - it)
set $a = code.begin()
print ($a - it)
print $a
print /r $a
print /r it
print it._M_current
print $a._M_current - it._M_current
q
y
b PARSER::passagem_macros(std::vector<_linha, std::allocator<_linha> >) 
r teste -m
n
s
finis
s
n
print it
print code
n
print code
print \r code
print /r code
print /r it
print /r _code
print _code._M_imp._M_start - it._M_current
print _code._M_impl._M_start - it._M_current
print code._M_impl._M_start - it._M_current
print it - code.begin()
print it - _code.begin()
print (it - code.begin())
q
n
kill
y
q
b PARSER::passagem_macros(std::vector<_linha, std::allocator<_linha> >) 
b teste -r
n
r teste -r
r teste -m
n
s
finis
s
n
print new_macro
print _code.begin()
print \r _code.begin()
print /r _code.begin()
print /r it
fini
n
print i_end
n
target record-full
n
rn
where
q
n
kill
y
q
b PARSER::passagem_macros(std::vector<_linha, std::allocator<_linha> >) 
r teste -m
n
print m_end
print _end
print i_end
q
y
b PARSER::run_macros(std::vector<_linha, std::allocator<_linha> >) 
r teste -r
r teste -m
n
q
b PARSER::run_macros(std::vector<_linha, std::allocator<_linha> >) 
r teste -m
n
print PARSER::erros_list 
info break
delete 1
b MacroTable::create_macro(__gnu_cxx::__normal_iterator<_linha*, std::vector<_linha, std::allocator<_linha> > >&, std::vector<_linha, std::allocator<_linha> >&, std::vector<_erro, std::allocator<_erro> >&) 
r teste -m
y
n
print erros_list 
n
print erros_list 
n
until 310
n
print PARSER::erros_list 
q
y
b 542
n
b PARSER::passagiunics(std::vector<_linha, std::allocator<_linha> >) 
r -o Input/single_pass
until 542
n
p ok
n
print sum_list[i]
print simb_list
kill
y
q
b PARSER::passagiunics(std::vector<_linha, std::allocator<_linha> >) 
r -o Input/single_pass
until 542
target record-full
n
print sum_list
n
print valor_const 
simb_list.begin() + 1
print simb_list.begin() + 1
print simb_list._M_Impl_._M_begin + 1
print simb_list._M_begin + 1
print /r simb_list
print simb_list._M_Impl_._M_start + 1
print simb_list._M_start + 1
print simb_list._M_impl_._M_start + 1
print simb_list._M_impl._M_start + 1
print (simb_list._M_impl._M_start + 1)->value
obj_code[21]
print obj_code[21]
print obj_code
kill
y
q
b PARSER::passagiunics(std::vector<_linha, std::allocator<_linha> >) 
r -o Input/single_pass
n
print linha
n
print increment_add 
print token
n
print pc
print PC
n
n
print PC
n
print token
n
print increment_add 
n
print PC
n
print PC
q
y
q
run
where
bt
print _start
q
y
b parser.cpp:502
run -o Input/single_pass
print linha
n
print line_size
print rinst.qtd_operandos
n
print line_size
n
k
y
q
b PARSER::passagiunics(std::vector<_linha, std::allocator<_linha> >) 
r -o Input/single_pass
n
print linha
b 392
continue
r -o Input/single_pass
n
until 392
n
r -o Input/single_pass
y
n
print linha
next
print linha
next
print linha
next
print linha
next
print erros_list
n
n
print i
n
print simb_list
n
print linha
n
p linha
b if space_found = true
b if space_found == true
info break
delete 3
delete 1
delete 2
info break
c
print linha
print space_found 
n
print linha
print simb_list
print simb_list[0]
n
print linha
n
print linha
n
print linha
b 603
c
c
print linha
print simb_list
n
u 609
n
print simb_list[i]
n
target record-full
u 622
rn
print simb_listí[i]
print simb_listí[i]
print simb_listí
print simb_list
print simb_list[0]
y
rn
rn
rn
print simb_list[0]
y
rn
print simb_list[i].value
y
n
print j
rn
print j
k
y
q
b PARSER::passagiunics(std::vector<_linha, std::allocator<_linha> >) 
r -o Input/single_pass
b 419
info break
ignore 2 8
c
print linha
n
print token
n
k
y
q
b parser.cpp:691
r -o Input/single_pass
delete 1
b parser.cpp:690
r -o Input/single_pass
print linha
print token
print simb_list[i].lista_mem_changer
print simb_listí[i]
print simb_listt[i]
print simb_list[i]
print simb_list[i-1]
print simb_list[i+1]
k
y
q
b PARSER::passagiunics(std::vector<_linha, std::allocator<_linha> >) 
r
r -o Input/single_pass
b 649
c
print linha
c
print linha
c
print linha
n
k
y
q
q
b main
r -o Input/single_pass
n
print mem_wrapper
print mem_wrapper->code_impl
print ((*text_code_wrapper) mem_wrapper)->code_impl
print ((*text_code_wrapper) mem_wrapper).code_impl
print ((*text_code_wrapper) mem_wrapper)
print ((*text_code_wrapper)mem_wrapper)
n
s
fini
n
n
print memoriaLOCAL 
print memoriaLOCAL.size
print memoriaLOCAL.size()
fini
n
s
fini
s
n
print obj_codeLOCAL.size()
k
y
q
r -o Input/single_pass
where
r -o Input/single_pass
where
k
y
q
r -o Input/single_pass
b parser.cpp:362
info
display it
r -o Input/single_pass
y
display it
c
r -o Input/single_pass
y
display it
c
undisplay 2
c
r -o Input/single_pass
y
c
n
n
print section
n
r -o Input/single_pass
y
display m_beg
c
n
print m_end
r -o Input/single_pass
y
info break
delete 1
b MacroTable::create_macro(__gnu_cxx::__normal_iterator<_linha*, std::vector<_linha, std::allocator<_linha> > >&, std::vector<_linha, std::allocator<_linha> >&, std::vector<_erro, std::allocator<_erro> >&) 
c
n
print it
n
print name
n
n
print it
display it
n
print new_macro
n
print it
n
print m_end
n
print code
print it
print aux
k
y
q
b PARSER::passagem_unica(std::vector<_linha, std::allocator<_linha> >) 
r -o teste
n
print linha
display token
n
print linha
print erros
print erros_list
n
k
y
q
q
b PARSER::passagem_unica(std::vector<_linha, std::allocator<_linha> >) 
r -o teste
display token
n
undisplay 1
display *token
n
r -o teste
y
b 601
c
c
s
fini
s
n
k
y
q
b PARSER::passagem_macros(std::vector<_linha, std::allocator<_linha> >) 
r -o loko
n
display *it
n
n
r -o loko
y
n
r -o loko
y
n
k
y
q
b PRINT_L 
r
5
5
delete 1
info break
r
y
5
q
y
r
5
q
y
b MacroTable
n
b MacroTable::create_macro
r -m input/teste_macro.asm
n
r
b main
r
r -m input/teste_macro.asm
y
n
n
s
fi
fin
s
n
r -m input/teste_macro.asm
y
target record-full
n
s
fi
fini
s
quit
y
r -m input/teste_macro
r -m input/teste_macro.asm
b main
r -m input/teste_macro.asm
n
r -m input/teste_macro.asm
y
n
s
fini
s
n
s
fini
s
fini
s
fini
s
n
print it
k
y
q
r -m input/teste_macro
b main
r -m input/teste_macro
n
r -m input/teste_macro
y
n
s
fini
s
n
s
fini
s
n
r -m input/teste_macro
y
n
s
fini
s
n
s
fini
s
n
s
fini
s
n
print it
n
print it
quit
y
b main
r
n
s
n
print new_code
print rinst
print rinst->name
print PARSER::translation
quit
y
b main
r
bt
where
b main
r
y
n
s
n
print PARSER::translate
print PARSER::translation
s
n
print new_code
n
target record-full
n
rn
print arg_it
print new_code
n
rn
rn
rn
n
rn
rn
print arg_it
k
u
y
q
b PARSER::run_montador(std::vector<_linha, std::allocator<_linha> >) 
r
n
print code
r
y
print code
delete 1
b main
r
y
n
print my_mem
s
fini
s
n
s
fini
s
n
fini
quit
k
y
q
b PARSER::passagem_unica(std::vector<_linha, std::allocator<_linha> >) 
r
n
print code
n
k
y
k
q
b PARSER::passagem_unica(std::vector<_linha, std::allocator<_linha> >) 
r
n
print token
b PARSER::isinst
r
y
c
print rinst
print *rinst
print _inst
delete 1
info break
delete 2
watch rinst
r
y
b PARSER::passagem_unica(std::vector<_linha, std::allocator<_linha> >) 
display *rinst
display rinst
r
y
display *rinst
display rinst
n
display
remove rinst
delete rinst
k
y
q
b PARSER::passagem_unica(std::vector<_linha, std::allocator<_linha> >) 
r
display rinst
n
r
y
b PARSER::isinst(std::string, _inst*) 
c
n
print inst_cur
n
k
y
q
b PARSER::passagem_unica(std::vector<_linha, std::allocator<_linha> >) 
r
target record-full
n
s
fini
s
n
print inst
n
print _inst
print rinst
n
print achei
fini
n
print rinst
n
r
c
r
y
n
b isinst
n
b PARSER::isinst
c
print rinst
n
print inst_cur
n
print rinst
n
print *rinst
print rinst
r
y
c
n
print rinst
n
fini
print rinst
n
print rinst
k
y
q
b PARSER::passagem_unica(std::vector<_linha, std::allocator<_linha> >) 
display *rinst
r
display *rinst
n
undisplay *rinst
undisplay 
y
n
display *rinst
n
print instrucoes
r
y
c 383
n
r
b PARSER::passagem_unica(std::vector<_linha, std::allocator<_linha> >) 
n
r
n
display instrucoes
n
k
y
q
b PARSER::passagem_unica(std::vector<_linha, std::allocator<_linha> >) 
r
k
y
q
b PARSER::passagem_unica(std::vector<_linha, std::allocator<_linha> >) 
r
n
display linha
n
print token
undisplay 1
display token
n
print text_ia32
k
y
q
b PARSER::passagem_unica(std::vector<_linha, std::allocator<_linha> >) 
r
display token
n
undisplay 1
display *token
n
k
y
q
b parser.cpp::_str
n
b parser::_str
n
b parser.cpp::2
n
b parser.cpp:2
delete 1
b parser.cpp:_str
n
b main
r to_binary.asm 
n
s
fini
s
n
s
fini
s
b 563
c
target record-full
n
print it
k
y
q
b parser.cpp:573
r to_binary.asm 
n
r to_binary.asm 
y
print space_code
print it
print sp_it
display sp_it
n
print it
n
k
y
q
r
bt
quit
y
b tree.hpp:95
n
b main
r
n
quit
y
k
y
q
r
bt
quit
y
r
bt
quit
yy
r
bt
quit
y
b main
b podar<int>(bool, int, Tree_Node<int>*) 
r
c
target record-full
c
rn
rfini
rs
rn
print it
rn
print it
print node
print node ->data
print node->children
print node->children.first()
print node->children.front()
y
print *(node->children.front())
quit
y
b podar
n
r
b podar
n
b podar<int>(bool, int, Tree_Node<int>*) 
r
y
display val
undisplay val
undisplay 1
display *node
c
n
target record-full
n
undisplay 1
undisplay 2
display *node
n
fini
n
display it
n
print *it
info display
undisplay 3
display *node
undisplay 4
display **it
n
quit
j
rn
k
y
q
b podar<int>(bool, int, Tree_Node<int>*) 
r
display *node
c
n
display **it
n
fini
n
k
y
q
b podar<int>(bool, int, Tree_Node<int>*) 
r
display *node
c
n
fini
n
display **it
n
print *(0x60f3e0)
print (*it)->children
print *(0x60f590)
print (*(0x60f3e0)).data
print *(0x60f590)
k
y
undisplay 1
b main
r
n
u 30
n
s
fini
s
target record-full
n
display *cur
undisplay 2
display cur
n
undisplay 4
n
print aux
n
print aux
display aux
n
print *aux
n
undisplay 5
display *aux
n
print *it
n
n
fini
n
s
n
s
fini
s
n
s
fini
s
n
s
fini
s
n
s
fini
s
k
y
q
b podar<int>(bool, int, Tree_Node<int>*) 
r
display *node
c
n
fini
n
display **it
n
n
rn
k
y
r
c
n
print it
print \r it
print /r it
m
n
print /r it
print  /r *it
print   *it
print  *(it + 1)
print  *(it._M_node + 1)
print  *(it._M_node + 1)
print  (*(*(it._M_node + 1)))._M_node
print  *(*(it._M_node + 1))._M_node
print  (*(it._M_node + 1))._M_node
print  (*(it._M_node + 1))
print  (*(it._M_node + 1))._M_next
print *( (*(it._M_node + 1))._M_next)
print  (*(0x60f560))
print it
print **it
n
fini
n
n
print \r *it
print /r *it
print (*(0x60f5c0))
type
typename
ptype it
ptype 
ptype (*(0x60f5c0))
ptype ((0x60f5c0))
print /r *it
print  *it
print  it
print /r it
n
print node->chidlren
print node->children
k
y
q
b podar<int>(bool, int, Tree_Node<int>*) 
r
c
display *node
c
n
fini
n
display **it
n
k
y
q
b podar<int>(bool, int, Tree_Node<int>*) 
r
c
display *node
c
n
display **it
n
fini
n
quit
y
b podar<int>(bool, int, Tree_Node<int>*) 
r
print *node
c
display *node
c
n
fini
n
display **it
n
print node->children[0]
print node->children
n
c
bt
print *(0x60f590)
r
y
c
fini
c
r
y
c
fini
n
target record-full
n
print it
print **it
rn
rn
rn
print **it
y
print *it
k
y
q
r
r
y
k
y
q
b loop_fp<int>(int, Tree_Node<int>*, std::vector<int, std::allocator<int> > const&)
r
c
bt
quit
y
r
br
bt
k
y
q
r
bt
q
y
r items.db 2 4
k
y
q
r items.db 2 4
print src_kid
k
y
q
b rebuild_fptree<int>(int, std::list<Tree_Node<int>*, std::allocator<Tree_Node<int>*> >*) 
r items.db 2 4
print supp
print header
print *header
n
print ord
print Tree_Node<int>::m_ordered
k
y
q
b rebuild_fptree<int>(int, std::list<Tree_Node<int>*, std::allocator<Tree_Node<int>*> >*) 
r items.db 2 4
k
y
q
b main
r items.db 2 4
n
fini
n
n
fini
n
n
u 58
u67
u 67
n
print sub_trees[0]
print *(sub_trees[0])
print *(sub_trees[0]).children
print (*(sub_trees[0])).children
print (*(sub_trees[0])).children->data
print (*(sub_trees[0])).children.first()->data
print (*(sub_trees[0])).children.begin()->data
print (*(sub_trees[0])).children
print ((*(sub_trees[0])).children)[0]
print *(0x60fbb0)
print *(0x60fcd0)
print tr_table
n
br
bt
k
y
q
